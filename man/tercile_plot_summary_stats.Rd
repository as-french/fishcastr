% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tercile_plot_summary_stats.R
\name{tercile_plot_summary_stats}
\alias{tercile_plot_summary_stats}
\title{Generate seasonal forecast tercile plots and summary statistics}
\usage{
tercile_plot_summary_stats(
  seasonal_forecast_predictions,
  observed_anomalies,
  species_name,
  season,
  method,
  plot = TRUE
)
}
\arguments{
\item{seasonal_forecast_predictions}{An n x m matrix containing all member
specific classified anomalies. Number of rows is equal to number of
reforecast years and number of columns is equal to number of members in
ensemble.}

\item{observed_anomalies}{A list returned by boxplot_phenology().}

\item{species_name}{A character string to be printed as a title in the
tercile plot. This currently can be: "Atlantic salmon (smolt)", "Anadromous
brown trout (smolt)", or "European (silver) eel".}

\item{season}{A character string to be printed as a subtitle of the tercile
plot.}

\item{method}{A character string indicating summary statistic method (i.e.,
"mean" or "median")}

\item{plot}{Boolean. Plot seasonal forecast terciles along with ROCSS per
anomaly type?}
}
\value{
A list of length two. The first element of the list is a ten column
data.frame of the data used to produce the plot: i.e., year column, year;
three columns containing respective percentage of members that forecast
each phenology anomaly category (average, early, late); a column total
counts, n; the observed anomaly, anom; and colour (col) of each observed
anomaly plotted. The second list element is the ROCSS and boolean
significance of the score at the 0.05 level (default for
rocss_fun_visualizeR).
}
\description{
This function combines the data returned by boxplot_phenology()
(i.e., based on observed counts) in addition to a list of returned results
from boxplot_phenology() (i.e., based on predicted counts for multiple
members) , to plot all reforecast predictions and an operational year (the
final year) in a tercile plot. Each row of the tercile plot grid represents
an anomaly type (i.e., early, late, average). The Receiver Operating
Characteristic Skill Score (ROCSS) is presented where there is sufficient
statistical power to facilitate "reasonable" interpretation.
}
\examples{
\dontrun{
# load predictions in list format
seasonal_forecast_list_dfs_ssmolt_daily_stoc <-
  readRDS(paste0(
    system.file("vignettes", package = "fishcastr"),
    "/vignette_data/SF_salmon_ideal_loo_cv.rds"
  ))

summary_stats = c("mean", "50th", "5th", "25th", "33rd", "66th", "75th", "95th")
pred_or_sim = "forecast_sim_counts"

dirName <- paste0(system.file("vignettes", package = "fishcastr"),
                  "/vignette_figures/Fig5a/")
dir.create(dirName, showWarnings = FALSE, mode = "0777")

# --------------------------------------------------------------------------------- #
# EXTRACT TERCILE CLASSES FOR OBS DATA ----
# --------------------------------------------------------------------------------- #
seas_fore_df_ssmolt_daily_full_obs <-
  do.call(rbind,
          lapply(
            X = seasonal_forecast_list_dfs_ssmolt_daily_stoc,
            FUN = function(x) {
              x[[1]]
            }
          ))

seas_fore_df_ssmolt_daily <-
  seas_fore_df_ssmolt_daily_full_obs[seas_fore_df_ssmolt_daily_full_obs$salmonid_year <= 2019, ]

# add observed 2019 smolts to df
data_ssmolt <- fishcastr::data_ssmolt
NA_dates_2019 <-
  seas_fore_df_ssmolt_daily$date[which(is.na(seas_fore_df_ssmolt_daily$ssmolt))]
data_ssmolt$ssmolt[data_ssmolt$date \%in\% NA_dates_2019]
seas_fore_df_ssmolt_daily$ssmolt[seas_fore_df_ssmolt_daily$date \%in\% NA_dates_2019] <-
  data_ssmolt$ssmolt[data_ssmolt$date \%in\% NA_dates_2019]

seas_fore_df_ssmolt_daily_tercile_data <-
  fishcastr::boxplot_phenology(
    bio_year = seas_fore_df_ssmolt_daily$salmonid_year,
    counts = seas_fore_df_ssmolt_daily$ssmolt,
    yday = seas_fore_df_ssmolt_daily$salmonid_yday,
    dates = seas_fore_df_ssmolt_daily$date,
    method = "mean",
    species_name = "Atlantic salmon (smolt)",
    season = "Spring",
    summary_stat_calculation_months = c(3:7),
    plot = FALSE,
    detrended = FALSE
  )

obs <- seas_fore_df_ssmolt_daily_tercile_data

# --------------------------------------------------------------------------------- #
# EXTRACT TERCILE CLASSES FOR FORECAST DATA ----
# --------------------------------------------------------------------------------- #
seas_list <- plyr::llply(
  .data = 1:25,
  .fun = function(y) {
    #y = 1
    seas_fore_df_ssmolt_daily_full <-
      do.call(rbind,
              lapply(
                X = seasonal_forecast_list_dfs_ssmolt_daily_stoc,
                FUN = function(x) {
                  x[[y]]
                }
              ))
    seas_fore_df_ssmolt_daily <-
      seas_fore_df_ssmolt_daily_full[seas_fore_df_ssmolt_daily_full$salmonid_year <= 2019, ]

    # 3. use existing function to calculate quantile trends in observed data
    seas_fore_df_ssmolt_daily_tercile_data_new <-
      fishcastr::boxplot_phenology(
        bio_year = seas_fore_df_ssmolt_daily$salmonid_year,
        counts = seas_fore_df_ssmolt_daily[[pred_or_sim]],
        yday = seas_fore_df_ssmolt_daily$salmonid_yday,
        dates = seas_fore_df_ssmolt_daily$date,
        method = "mean",
        species_name = "Atlantic salmon (smolt)",
        season = "Spring",
        summary_stat_calculation_months = c(3:7),
        plot = FALSE,
        detrended = FALSE
      )

    reforecasts <-
      seas_fore_df_ssmolt_daily_tercile_data_new$summary_stats
    return(
      list(
        reforecasts_list = reforecasts,
        mean_terciles = seas_fore_df_ssmolt_daily_tercile_data_new$mean_terciles
      )
    )
  }
)
#
names(seas_list) <- 1:25

all_sum_stats_seas_list <- lapply(
  X = seas_list,
  FUN = function(x) {
    result <- cbind(x[["reforecasts_list"]][["year"]],
                    x[["reforecasts_list"]][["mean"]])
    return(result)
  }
)

# bind summ stats together
all_sum_stats_seas_list.bind <-
  do.call(cbind, all_sum_stats_seas_list)
# subset columns to just one year column and 25 members
all_sum_stats_seas_list.bind.sub <-
  as.data.frame(cbind(
    all_sum_stats_seas_list.bind[, 1],
    all_sum_stats_seas_list.bind[, seq(
      from = 2,
      to = ncol(all_sum_stats_seas_list.bind),
      by = 2
    )]
  ))
colnames(all_sum_stats_seas_list.bind.sub) <-
  c("year", paste0("member_", 1:25))

# compute terciles using all member and year summary stats
all_member_sum_stats <-
  c(as.matrix(all_sum_stats_seas_list.bind.sub[, -1]))
tercile_bnds <- as.numeric(Hmisc::cut2(all_member_sum_stats,
                                       g = 3,
                                       onlycuts = TRUE))[2:3]

# assign each member a tercile anomaly
tercile_anoms_sf_ensemble <-
  cbind(ifelse(
    all_sum_stats_seas_list.bind.sub[, -1] < tercile_bnds[1],
    "early",
    ifelse(
      all_sum_stats_seas_list.bind.sub[, -1] >= tercile_bnds[2],
      "late",
      "average"
    )
  ))

rownames(tercile_anoms_sf_ensemble) <-
  all_sum_stats_seas_list.bind.sub[, 1]
colnames(tercile_anoms_sf_ensemble) <- 1:25

# --------------------------------------------------------------------------------- #
# TERCILE PLOT ----
# --------------------------------------------------------------------------------- #
dirName <- paste0(system.file("vignettes", package = "fishcastr"),
                  "/vignette_figures/Fig5a/salmon/")
dir.create(dirName, showWarnings = FALSE, mode = "0777")

type_of_pred <-
  ifelse(pred_or_sim == "forecast_sim_counts", "sim", "pred")

png(
  file = paste0(dirName, "Fig5a_ideal_", type_of_pred, "_", "mean", ".png"),
  width = 2100,
  height = 2200,
  res = 300
)
terciles_summary_stat_plot <-
  fishcastr::tercile_plot_summary_stats(
    seasonal_forecast_predictions = tercile_anoms_sf_ensemble,
    observed_anomalies = obs,
    species_name = "Atlantic salmon (smolt)",
    season = "spring",
    method = "mean",
    plot = FALSE
  )
invisible(dev.off())
}
}
